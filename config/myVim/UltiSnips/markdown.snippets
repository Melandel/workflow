global !p
from my_snippets_helpers import *
endglobal

snippet adr "Architectural Decision Record" b
\`\`\`text
Current Status: ${6:Waiting for approval} - By: ${7:Minh-TÃ¢m} - Since: `!p snip.rv=today()`
\`\`\`

## ðŸ“‹ Context and Problem Statement
> **${1:Which foo should we bar? How should we foobar?}**

${2:Decision taken:}
${3:\`\`\`${4:text}
${5:foobar}
\`\`\`}

## ðŸ’¡ Considered Options
* _Option 1: $0_
	* âœ… It works
	* âœ… It is simple

## ðŸ“Ž Additional Information
* [some link]()
* [some other link]()
endsnippet

snippet madr "Description" b
\`\`\`text
Current Status: ${1:Waiting for approval} - By: ${2:Minh-TÃ¢m} - Since: `!p snip.rv=today()`
\`\`\`

problem$0
drivers
options
decision
prosConsUnknowns
extra
endsnippet

snippet problem "Context & Problem Statement" b

## ðŸ“‹ Context and Problem Statement
> **${1:Which format and structure should our architectural records follow?}**
${2:
We lost entire days tracking why some code was written this way on the following items:
<details><summary>Item 1</summary>

\`\`\`
Time lost: 5 days
\`\`\`
</details>

<details><summary>Item 2</summary>

\`\`\`
Time lost: 4 days
\`\`\`
</details>}
endsnippet

snippet drivers "Decision Drivers" b

## ðŸ”° Decision Drivers
* $0Impact on existing API
* Impact on existing workflow
* Impact on future decisions
* Maintenability
* Testability
* Security
* Performances

endsnippet

snippet options "Considered Options" b

## ðŸ’¡ Considered Options
* **Option 1:** $0Use Markdown Architectural Decision Record
* **Option 2:** Create custom architectural decision record format
* **Option 3:** Do not use any form of template

endsnippet

snippet decision "Decision Outcome" b

## ðŸŽ¯ Decision Outcome
* **Option ${0}1:** Use Markdown Architectural Decision Record
	* best compromise regarding cost and maintenance
	* established
* **Positive Consequences:**
	* We now have resources to speed up newcomers' training
* **Negative Consequences:**
	* Need to create records for existing records
	* Need to train other teams

endsnippet

snippet prosConsUnknowns "Pros, Cons & Unknowns" b

## ðŸŽ­ Pros, Cons & Unknowns of the Options

* **Option 1:** $0Use Markdown Architectural Decision Record
	* âœ…âœ… Easy
	* âœ… Structured, Established
	* ðŸš« Markdown is limited in features
	* ðŸš« Requires markdown viewer
	* ðŸ¤· Unmeasured effectiveness
<!-- -->
* **Option 2:** Create custom architectural decision record format
	* âœ… Most adapted
	* ðŸš« Not Established
	* ðŸ¤· Cost, Impact
<!-- -->
* **Option 3:** Do not use any form of template
	* âœ… No cost
	* ðŸš« No time saved
	* ðŸ¤· May bite us later
<!-- -->

endsnippet

snippet extra "Additional Information" b

## ðŸ“Ž Additional Information
* $0[some link]()
* [some other link]()
endsnippet

snippet "spoil(er)?" "spoiler" br
{< Example 1$0
${VISUAL:Content}
>}
endsnippet

snippet cols "columns" b

<div style="display: flex"><div style="flex: ${1:50}%; max-width: $1%;">

$0${VISUAL}
</div><div style="flex: $1%; max-width: $1%;">

\`\`\`
Example
\`\`\`
</div></div>

endsnippet

snippet blog "blog post" b
---
layout: post
title:  "${1:My quest for improved craftsmanship}"
date:   `!v strftime('%Y-%m-%d')`
categories: ${2:craft}
---

${3:**"Good Enough"** is often the driving philosophy at the workplace - that's reasonable. But it also means people who go for _"Highest Level of Craft"_ cannot improve correctly at the workplace.}

Hi!

> ${4:Do you feel _agile_?
Do you feel _proud_ of the codebase you're working on?
What's your idea about how far (or close) you are from the _state of the art_?
Do you _trust_ the code you read?
What are three _positive_ things your codebase inspires to you?}

Let's talk about ${5:stuff.}

&nbsp;

$0
endsnippet

snippet rq "REST exhange" b
${1:###} ${2:Verb Noun}
<div style="display: flex"><div style="flex: 50%; max-width: 50%;">

**Request**
\`\`\`
$0curl -X GET $api
--verbose --silent --location
-H "Authorization: Bearer $token"
\`\`\`


</div><div style="flex: 50%; max-width: 50%;">

**Response**

ðŸš« 401 Unauthorized
\`\`\`
[]
\`\`\`
* Caused by this
* Caused also by that

âœ… 200 OK
\`\`\`
[]
\`\`\`
</div></div>

endsnippet

snippet seq "sequence diagram" b
\`\`\`puml_sequence
title __${1:Not only individuals and interactions, but also a community of professionals}__
'https://plantuml.com/fr/sequence-diagram
skinparam BoxPadding 10
skinparam ParticipantPadding 30

box "${4:Foo}"
	participant "${2:Foo}" as $3
$0end box

box "${5:Bar}"
	participant "${3:Bar}" as $4
end box

$3 -> $4
\`\`\`
endsnippet

snippet act "activity diagram" b
\`\`\`puml_activity
title __${1:Not only working software, but also well-crafted software}__
'https://plantuml.com/fr/activity-diagram-beta
start

$0group Arrange
	:Build Credit Application Contract;
	note right
		foo
			* bar
	end note
	:Build main route request;
end group

group Act
	:Call RejectionRule's main route;
	:Call RejectionRule's details route;
end group

group Assert
	:Run assertions on details;
end group
stop
\`\`\`
endsnippet

snippet cls "class diagram (2 packs)" b
\`\`\`puml_class
title __${1:Not only responding to change, but also steadily adding value}__
'https://plantuml.com/fr/class-diagram

$0
\`\`\`
endsnippet

snippet mm "mindmap diagram" b
\`\`\`puml_mindmap
title __${1:Not only customer collaboration, but also productive partnerships}__
'https://plantuml.com/fr/mindmap-diagram

*[#lightblue] ${2:Information Access}
** ${3:By page reference}
$0
\`\`\`
endsnippet

snippet "p([0-9]*)" "package" br
package "${1:Some package `!p snip.rv = match.group(1)`}" as _`!p snip.rv = pascal_case(t[1])` {`!p snip.rv = newline_if_content(snip.v.text, t[2])`$2`!p snip.rv = add_indent(snip.v.text)``!p snip.rv = space_or_newline_depending_on_content(snip.v.text, t[2])`}
endsnippet

snippet "r([0-9]*)" "rectangle" br
rectangle "${1:Some rectangle `!p snip.rv = match.group(1)`}" as _`!p snip.rv = pascal_case(t[1])` {`!p snip.rv = newline_if_content(snip.v.text, t[2])`$2`!p snip.rv = add_indent(snip.v.text)``!p snip.rv = space_or_newline_depending_on_content(snip.v.text, t[2])`}
endsnippet

snippet "c([0-9]*)" "class" br
class "${1:ClassName`!p snip.rv = match.group(1)`}" as _`!p snip.rv = pascal_case(t[1])` {`!p snip.rv = newline_if_content(snip.v.text, t[2])`$2`!p snip.rv = add_indent(snip.v.text)``!p snip.rv = space_or_newline_depending_on_content(snip.v.text, t[2])`}
endsnippet

snippet "i([0-9]*)" "class" br
interface "I${1:Name`!p snip.rv = match.group(1)`}" as _I`!p snip.rv = pascal_case(t[1])` {`!p snip.rv = newline_if_content(snip.v.text, t[2])`$2`!p snip.rv = add_indent(snip.v.text)``!p snip.rv = space_or_newline_depending_on_content(snip.v.text, t[2])`}
endsnippet

snippet d "d2 snippet" b
\`\`\`d2$0
\`\`\`
endsnippet

snippet data "data snippet" b
\`\`\`data
$0
\`\`\`
endsnippet

snippet m "mermaidjs snippet" b
\`\`\`mmd$0
\`\`\`
endsnippet

snippet ic "d2 icon" b
icon: ./icons/
endsnippet

snippet cible "Diagramme de visualisation de la cible" b
\`\`\`d2 Comment aller Ã  la cible?
grid-columns: 2
DÃ©part {
    label.near: outside-top-center
    a: "a" {
    }
    b: "b" {
    }
    a -> b
}
Cible {
    label.near: outside-top-center
    a: "a" {
    }
    b: "b" {
    }
    c: "c" {
    }
    a -> b
    b -> c
}
\`\`\`

endsnippet

snippet design "Diagramme de design" b
\`\`\`d2 Not only working software, but also well-crafted software
grid-rows: 2
classes: {
  NONE: {style.opacity: 0}
  PLUGIN: { style.stroke: blue; style.font-color: blue }
}

$0ios: "(Plugins)\nLivraison des entrÃ©es/sorties" {
  class: PLUGIN
  io: "X.Mecanism.IO.webapi.DLL" {
    controller: "controller" {
    }
  }
}

core: "" {
  class: NONE
  grid-columns: 2
  app: "X.application.dll" {
    grid-rows: 2
    grid-columns: 2
    api: "application programming interface" {
      height: 200
    }
    usecase: "use case" {
      height: 100
    }
    1-2: "" { class: NONE }
    spi: "service provider interface" {
    }
  }
  domain: "X.domain.dll" {
    grid-rows: 3
    entity: "entity" {
    }
  }
}
2-1: "" { class: NONE }
infras: "(Plugins)\nPersistence" {
  class: PLUGIN
  label.near: outside-left-top
  infra: "X.Mecanism.Persistence.DLL" {
    width: 1100
    repository: "repository" {
    }
  }
}

ios -> core.app.api { class: PLUGIN }
infras -> core.app.spi { class: PLUGIN }
infras -> core.domain.entity { class: PLUGIN }

core.app.usecase -> core.domain.entity
core.app.spi -> core.domain.entity
core.app.usecase -> core.app.api {
  target-arrowhead.style.filled: false
}
\`\`\`

endsnippet

snippet archi "Diagramme d'architecture" b
\`\`\`d2 Not only responding to change, but also steadily adding value
$0u1: Utilisateur 1 {
  shape: person
}
u2: Utilisateur 2 {
  shape: person
  style.multiple: true
}
u3: Utilisateur 3 {
  shape: person
}
front: "front-1" {
}
front2: "front-2" {
}
front3: "front-3" {
}
d: "sub-domain" {
  bff: "bff-A" {
  }
  bff2: "bff-B" {
  }
  back: "business-logic" {
  }
  acl: "anti-corruption-layer"
}
ext: "external system" {
}
u1 -> front -> d.bff
u2 -> front2 -> d.bff
u3 -> front3 -> d.bff2
d.bff -> d.back
d.bff2 -> d.back
d.back -> d.acl -> ext
\`\`\`

endsnippet

priority 1
global !p
from my_snippets_helpers import *
endglobal

snippet ns "namespace (file-scoped)" b
namespace `!v GetCurrentCsharpNamespace()`;

$0
endsnippet

snippet Ns "namespace (old school)" b
namespace `!v GetCurrentCsharpNamespace()`
{
	$0
}
endsnippet

snippet itf "Interface" b
public interface ${1:`!p snip.rv = basename_to_classname(snip.basename)`}
{
	$0
}
endsnippet

snippet cls "class" b
$0class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public `!p snip.rv = basename_to_classname(snip.basename)`()
	{
	}
}
endsnippet

snippet Cls "static class" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static$1
}
endsnippet

snippet ext "extension methods" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename).replace('.', '')`
{
	public static string ${3:ToSomeString}(this ${1:string} ${2:`!p snip.rv = camel_case(t[1])`})
	=> $2 s$0witch
	{
		null => null,
		_ => $2.ToString()
	};

	public static string $3(this $1 $2)
	{
		var foo = $2 switch
		{
			null => null,
			_ => $2
		};

		return foo;
	}
}
endsnippet

snippet type "type defined on top of primitive type" b
namespace `!v GetCurrentCsharpNamespace()`;

$0class `!p snip.rv = basename_to_classname(snip.basename)`
{
	readonly ${1:string} _${2:encapsulated};
	`!p snip.rv = basename_to_classname(snip.basename)`($1 `!p snip.rv = "value" if (t[2] == "encapsulated") else t[2]`)
	{
		_$2 = `!p snip.rv = "value" if (t[2] == "encapsulated") else t[2]` switch
		{
			null => throw ${3:ObjectConstructionException}.${4:FromInvalidMemberValue}(GetType(), nameof(_$2), `!p snip.rv = "value" if (t[2] == "encapsulated") else t[2]`),
			_ => `!p snip.rv = "value" if (t[2] == "encapsulated") else t[2]`
		};
	}

	public static implicit operator $1(`!p snip.rv = basename_to_classname(snip.basename)` obj)
	=> obj._$2;

	public override string ToString()
	=> _$2.ToString();

	public static `!p snip.rv = basename_to_classname(snip.basename)` From`!p snip.rv = pascal_case(t[1])`($1 $2)
	{
		try
		{
			return new($2);
		}
		catch ($3 `!p snip.rv = camel_case(t[3])`)
		{
			AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
			throw;
		}
		catch (Exception developerMistake)
		{
			var `!p snip.rv = camel_case(t[3])` = $3.FromDeveloperMistake(typeof(`!p snip.rv = basename_to_classname(snip.basename)`), developerMistake);
			AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
			throw `!p snip.rv = camel_case(t[3])`;
		}

		void AddMethodParametersValuesAsDebuggingInformation($3 `!p snip.rv = camel_case(t[3])`)
		{
			`!p snip.rv = camel_case(t[3])`.${4:AddDebuggingInformation}(nameof($2), $2);
		}
	}
}
endsnippet

snippet rc "record" b
record ${1:`!p snip.rv = basename_to_classname(snip.basename)`}(
	$0);
endsnippet

snippet ds "data structure with properties" b
namespace `!v GetCurrentCsharpNamespace()`;

record `!p snip.rv = basename_to_classname(snip.basename)`
{
	`!p snip.rv = "readonly" if t[1].startswith("_") else "public"` ${2:string} ${1:Name}`!p snip.rv = ";" if t[1].startswith("_") else " { get; init; }"`
	`!p snip.rv = basename_to_classname(snip.basename)`($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		$1 = `!p snip.rv = camel_case(t[1]).lstrip('_')` switch
		{
			null => throw ${3:ObjectConstructionException}.${4:FromInvalidMemberValue}(GetType(), nameof($1), `!p snip.rv = camel_case(t[1]).lstrip('_')`),
			_ => `!p snip.rv = camel_case(t[1]).lstrip('_')`
		};
	}

	public static `!p snip.rv = basename_to_classname(snip.basename)` From$0($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		try
		{
			return new(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
		catch ($3 `!p snip.rv = camel_case(t[3])`)
		{
			AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
			throw;
		}
		catch (Exception developerMistake)
		{
			var `!p snip.rv = camel_case(t[3])` = $3.FromDeveloperMistake(typeof(`!p snip.rv = basename_to_classname(snip.basename)`), developerMistake);
			AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
			throw `!p snip.rv = camel_case(t[3])`;
		}

		void AddMethodParametersValuesAsDebuggingInformation($3 `!p snip.rv = camel_case(t[3])`)
		{
			`!p snip.rv = camel_case(t[3])`.${4:AddDebuggingInformation}(nameof(`!p snip.rv = camel_case(t[1]).lstrip('_')`), `!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
	}
}
endsnippet

snippet Ds "data structure with properties (old school)" b
namespace `!v GetCurrentCsharpNamespace()`;

class `!p snip.rv = basename_to_classname(snip.basename)`
{
	`!p snip.rv = "readonly" if t[1].startswith("_") else "public"` ${2:string} ${1:Name}`!p snip.rv = ";" if t[1].startswith("_") else " { get; }"`
	`!p snip.rv = basename_to_classname(snip.basename)`($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		$1 = `!p snip.rv = camel_case(t[1]).lstrip('_')` switch
		{
			null => throw ${3:ObjectConstructionException}.${4:FromInvalidMemberValue}(GetType(), nameof($1), `!p snip.rv = camel_case(t[1]).lstrip('_')`),
			_ => `!p snip.rv = camel_case(t[1]).lstrip('_')`
		};
	}

	public static `!p snip.rv = basename_to_classname(snip.basename)` From$0($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		try
		{
			return new(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
		catch ($3 `!p snip.rv = camel_case(t[3])`)
		{
			AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
			throw;
		}
		catch (Exception developerMistake)
		{
			var `!p snip.rv = camel_case(t[3])` = $3.FromDeveloperMistake(typeof(`!p snip.rv = basename_to_classname(snip.basename)`), developerMistake);
			AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
			throw `!p snip.rv = camel_case(t[3])`;
		}

		void AddMethodParametersValuesAsDebuggingInformation($3 `!p snip.rv = camel_case(t[3])`)
		{
			`!p snip.rv = camel_case(t[3])`.${4:AddDebuggingInformation}(nameof(`!p snip.rv = camel_case(t[1]).lstrip('_')`), `!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
	}
}
endsnippet

snippet exc "Exception" b
namespace `!v GetCurrentCsharpNamespace()`;

public class ${1:`!p snip.rv = basename_to_classname(snip.basename)`} : Exception
{
	$1(string message, Exception? innerException = null)
	: base(message, innerException)
	{
	}

	$0public static $1 From${2:InvalidMemberValue}(Exception? innerException = null)
	=> new("", innerException);

	public static $1 From$2(Exception? innerException = null)
	{
		var message = "";
		return new(message, innerException);
	}
}
endsnippet

snippet ex "Object construction exception" b
using System.Text;

namespace `!v GetCurrentCsharpNamespace()`;

public class ${1:ObjectConstructionException} : Exception
{
	readonly Type _typeOfObjectUnderConstruction;
	$1(Type typeOfObjectUnderConstruction, string message, Exception? innerException = null)
	: base(message, innerException)
	{
		_typeOfObjectUnderConstruction = typeOfObjectUnderConstruction;
	}

	$0public static $1 FromInvalidMemberValue(
		Type typeOfObjectContainingTheMember,
		string memberName,
		object? valueFoundInvalid,
		string? expectationMakingValueValid = null,
		Exception? innerException = null)
	{
		var messageBuilder = new StringBuilder();
		messageBuilder.Append($"{typeOfObjectContainingTheMember.Name}: ");
		messageBuilder.Append($"{memberName} cannot accept value {JsonSerializer.Serialize(valueFoundInvalid ?? "<null>")}");
		if (expectationMakingValueValid is not null)
		{
			messageBuilder.Append($" - {expectationMakingValueValid}");
		}
		messageBuilder.Append($" (namespace {typeOfObjectContainingTheMember.Namespace})");

		return new(typeOfObjectContainingTheMember, messageBuilder.ToString(), innerException);
	}

	public static $1 FromDeveloperMistake(
		Type typeOfObjectUnderConstruction,
		Exception developerMistake)
	=> new(
		typeOfObjectUnderConstruction,
		$"{typeOfObjectUnderConstruction.Name}: construction failed - {developerMistake.Message} (namespace {typeOfObjectUnderConstruction.Namespace})",
		developerMistake);

	public void AddDebuggingInformation(string informationName, object? informationValue)
	{
		var keyPrefix = $"{_typeOfObjectUnderConstruction.FullName}::{informationName}";
		var numberOfExistingKeysFound = 0;
		while (Data.Contains(BuildDebuggingInformationKey(keyPrefix, numberOfExistingKeysFound)))
		{
			numberOfExistingKeysFound++;
		}
		var uniqueKey = BuildDebuggingInformationKey(keyPrefix, numberOfExistingKeysFound);

		Data.Add(uniqueKey, informationValue ?? "<null>");

		string BuildDebuggingInformationKey(string keyPrefix, int numberOfExistingKeysFound)
		=> numberOfExistingKeysFound switch
		{
			0 => keyPrefix,
			_ => $"{keyPrefix}_{numberOfExistingKeysFound}"
		};
	}
}
endsnippet

snippet td "Test Double" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:I`!p snip.rv = basename_to_classname(snip.basename).replace('TestDouble', '')`} That_Does_Not_Trigger_Exceptions
	=> That_Returns(${2:Something}Archetype.SomeValue);

	public static $1 That_Returns($2 `!p snip.rv = camel_case(t[2])`)
	{
		var testDouble = Dummy;
		testDouble
			.${3:DoSomething}($0)
			.ReturnsForAnyArgs(`!p snip.rv = camel_case(t[2])`);

		return testDouble;
	}

	public static $1 Dummy => Substitute.For<$1>();
}
endsnippet

snippet arch "Archetype" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:`!p snip.rv = basename_to_classname(snip.basename).replace('Archetype', '')`} SomeValue => With_SomeValue_In_Every_Field(salt: 0);
	public static $1 SomeOtherValue => With_SomeValue_In_Every_Field(salt: 1);
	public static $1 YetAnotherValue => With_SomeValue_In_Every_Field(salt: 2);

	public static $1 With_SomeValue_In_Every_Field(int salt = 0)
	=> $1.From$0(
		someParameter: SomeParameterArchetype.With_SomeValue_In_Every_Field(salt));
}
endsnippet

snippet Arch "Archetype (with old-school data structures)" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:`!p snip.rv = basename_to_classname(snip.basename).replace('Archetype', '')`} SomeValue => With_SomeValue_In_Every_Field(salt: 0);
	public static $1 SomeOtherValue => With_SomeValue_In_Every_Field(salt: 1);
	public static $1 YetAnotherValue => With_SomeValue_In_Every_Field(salt: 2);

	public static $1 With_SomeValue_In_Every_Field(int salt = 0)
	=> new()
	{
		$0SomeParameter = SomeParameterArchetype.With_SomeValue_In_Every_Field(salt))
	};
}
endsnippet

snippet M "Factory method" b
$0public static `!p snip.rv = basename_to_classname(snip.basename)` From${1:Something}(${2:Foo} `!p snip.rv = camel_case(t[2])`)
{
	try
	{
		return new($0`!p snip.rv = camel_case(t[2])`);
	}
	catch (${3:ObjectConstructionException} `!p snip.rv = camel_case(t[3])`)
	{
		AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
		throw;
	}
	catch (Exception developerMistake)
	{
		var `!p snip.rv = camel_case(t[3])` = $3.FromDeveloperMistake(typeof(`!p snip.rv = basename_to_classname(snip.basename)`), developerMistake);
		AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
		throw `!p snip.rv = camel_case(t[3])`;
	}

	void AddMethodParametersValuesAsDebuggingInformation($3 `!p snip.rv = camel_case(t[3])`)
	{
		`!p snip.rv = camel_case(t[3])`.AddDebuggingInformation(nameof(`!p snip.rv = camel_case(t[2])`), `!p snip.rv = camel_case(t[2])`);
	}
}
endsnippet

snippet am "Assert Multiple" b
Assert.Multiple(() =>
{
	${VISUAL}
});
endsnippet

snippet aa "Arg.Any" w
Arg.Any<${VISUAL}>()
endsnippet

priority 1
global !p
from my_snippets_helpers import *
endglobal

snippet ns "namespace (file-scoped)" b
namespace `!v GetCurrentCsharpNamespace()`;

$0
endsnippet

snippet Ns "namespace (old school)" b
namespace `!v GetCurrentCsharpNamespace()`
{
	$0
}
endsnippet

snippet itf "Interface" b
public interface ${1:`!p snip.rv = basename_to_classname(snip.basename)`}
{
	$0
}
endsnippet

snippet cls "class" b
$0class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public `!p snip.rv = basename_to_classname(snip.basename)`()
	{
	}
}
endsnippet

snippet Cls "static class" b
static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static$1
}
endsnippet

snippet ext "extension methods" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename).replace('.', '')`
{
	public static string ${3:ToSomeString}(this ${1:string} ${2:`!p snip.rv = camel_case(t[1])`})
	=> $2 s$0witch
	{
		null => null,
		_ => $2.ToString()
	};

	public static string $3(this $1 $2)
	{
		var foo = $2 switch
		{
			null => null,
			_ => $2
		};

		return foo;
	}
}
endsnippet

snippet rc "record" b
record ${1:`!p snip.rv = basename_to_classname(snip.basename)`}(
	$0);
endsnippet

snippet ds "data structure with properties" b
namespace `!v GetCurrentCsharpNamespace()`;

`!v stridx(GetCurrentCsharpNamespace(), "Domain") >= 0 ? "public " : ""`record `!p snip.rv = basename_to_classname(snip.basename)`
{
	$0public override string ToString() => `!p snip.rv = t[1] if t[2] == "string" else '$\"{'+t[1]+'}\"'`;
	public static implicit operator `!p snip.rv = t[2]`(`!p snip.rv = basename_to_classname(snip.basename)` obj) => obj.$1;

	`!p snip.rv = "readonly" if t[1].startswith("_") else "public"` ${2:string} ${1:Name}`!p snip.rv = ";" if t[1].startswith("_") else " { get; init; }"`
	`!p snip.rv = basename_to_classname(snip.basename)`($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		$1 = `!p snip.rv = camel_case(t[1]).lstrip('_')` switch
		{
			null => throw ${3:ObjectConstructionException}.${4:WhenConstructingAMemberFor}<`!p snip.rv = basename_to_classname(snip.basename)`>(nameof($1), `!p snip.rv = camel_case(t[1]).lstrip('_')`),
			_ => `!p snip.rv = camel_case(t[1]).lstrip('_')`
		};
	}

	public static `!p snip.rv = basename_to_classname(snip.basename)` From($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		try
		{
			return new(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
		catch ($3 `!p snip.rv = camel_case(t[3])`)
		{
			`!p snip.rv = camel_case(t[3])`.EnrichWithInformationAbout<`!p snip.rv = basename_to_classname(snip.basename)`>(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
			throw;
		}
		catch (Exception developerMistake)
		{
			throw $3.WhenConstructingAnInstanceOf<`!p snip.rv = basename_to_classname(snip.basename)`>(developerMistake, `!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
	}
}
endsnippet

snippet Ds "data structure with properties (old school)" b
namespace `!v GetCurrentCsharpNamespace()`;

`!v stridx(GetCurrentCsharpNamespace(), "Domain") >= 0 ? "public " : ""`class `!p snip.rv = basename_to_classname(snip.basename)`
{
	$0public override string ToString() => `!p snip.rv = t[1] if t[2] == "string" else '$\"{'+t[1]+'}\"'`;
	public static implicit operator `!p snip.rv = t[2](`!p snip.rv = basename_to_classname(snip.basename)` obj) => obj.$1;

	`!p snip.rv = "readonly" if t[1].startswith("_") else "public"` ${2:string} ${1:Name}`!p snip.rv = ";" if t[1].startswith("_") else " { get; }"`
	`!p snip.rv = basename_to_classname(snip.basename)`($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		$1 = `!p snip.rv = camel_case(t[1]).lstrip('_')` switch
		{
			null => throw ${3:ObjectConstructionException}.${4:WhenConstructingAMemberFor}<`!p snip.rv = basename_to_classname(snip.basename)`>(nameof($1), `!p snip.rv = camel_case(t[1]).lstrip('_')`),
			_ => `!p snip.rv = camel_case(t[1]).lstrip('_')`
		};
	}

	public static `!p snip.rv = basename_to_classname(snip.basename)` From($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		try
		{
			return new(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
		catch ($3 `!p snip.rv = camel_case(t[3])`)
		{
			`!p snip.rv = camel_case(t[3])`.EnrichWithInformationAbout<`!p snip.rv = basename_to_classname(snip.basename)`>(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
			throw;
		}
		catch (Exception developerMistake)
		{
			throw $3.WhenConstructingAnInstanceOf<`!p snip.rv = basename_to_classname(snip.basename)`>(developerMistake, `!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
	}
}
endsnippet

snippet exc "Exception" b
namespace `!v GetCurrentCsharpNamespace()`;

public class ${1:`!p snip.rv = basename_to_classname(snip.basename)`} : Exception
{
	$1(string message, Exception? innerException = null)
	: base(message, innerException)
	{
	}

	$0public static $1 From${2:InvalidMemberValue}(Exception? innerException = null)
	=> new("", innerException);

	public static $1 From$2(Exception? innerException = null)
	{
		var message = "";
		return new(message, innerException);
	}
}
endsnippet

snippet ex "Object construction exception" b
using System.Text.Json;
using System.Text.Encodings.Web;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace `!v GetCurrentCsharpNamespace()`;

public class ${1:ObjectConstructionException} : Exception
{
	public override string Message => string.Join(" ; ", _messages);
	readonly List<string> _messages;
	$1(string message, Exception? innerException = null) : base(message, innerException)
	{
		_messages = new List<string>() { message };
	}

	public static $1 WhenConstructingAMemberFor<TObjectUnderConstruction>(
		string memberUnderConstruction,
		object? invalidValue,
		string? ruleThatInvalidatesTheValue = null,
		Exception? innerException = null)
	{
		var errorDuringSpecificMemberConstruction = BuildMemberConstructionMessage(
			typeof(TObjectUnderConstruction).Name,
			typeof(TObjectUnderConstruction).Namespace!,
			memberUnderConstruction,
			invalidValue);

		return new(errorDuringSpecificMemberConstruction, innerException);
	}

	public static $1 WhenConstructingAnInstanceOf<TObjectUnderConstruction>(
		Exception? innerException = null,
		object? constructionMethodParameter = null,
		[CallerMemberName] string callerMethodName = "")
	{
		string errorMessage = BuildInstanceConstructionErrorMessage(
			typeof(TObjectUnderConstruction).Name,
			typeof(TObjectUnderConstruction).Namespace!,
			innerException,
			callerMethodName,
			constructionMethodParameter == null
				? Array.Empty<object?>()
				: new[] { constructionMethodParameter });

		return new(errorMessage, innerException);
	}

	public static $1 WhenConstructingAnInstanceOf<TObjectUnderConstruction>(
		Exception? innerException = null,
		IEnumerable<object?>? constructionMethodParameters = null,
		[CallerMemberName] string callerMethodName = "")
	{
		string errorMessage = BuildInstanceConstructionErrorMessage(
			typeof(TObjectUnderConstruction).Name,
			typeof(TObjectUnderConstruction).Namespace!,
			innerException,
			callerMethodName,
			constructionMethodParameters?.ToArray() ?? Array.Empty<object?>());

		return new(errorMessage, innerException);
	}

	public $1 EnrichWithInformationAbout<TObjectUnderConstruction>(
		string memberUnderConstruction,
		object? invalidValue,
		string? ruleThatInvalidatesTheValue = null,
		Exception? innerException = null,
		[CallerMemberName] string callerMethodName = "",
		params object?[] constructionMethodParameters)
	{
		_messages.Add(
			BuildMemberConstructionMessage(
				typeof(TObjectUnderConstruction).Name,
				typeof(TObjectUnderConstruction).Namespace!,
				memberUnderConstruction,
				invalidValue,
				ruleThatInvalidatesTheValue: null,
				callerMethodName,
				constructionMethodParameters));

		return this;
	}

	public $1 EnrichWithInformationAbout<TObjectUnderConstruction>(
		IEnumerable<object?> constructionMethodParameters,
		Exception? innerException = null,
		[CallerMemberName] string callerMethodName = "")
	{
		_messages.Add(
			BuildInstanceConstructionErrorMessage(
				typeof(TObjectUnderConstruction).Name,
				typeof(TObjectUnderConstruction).Namespace!,
				innerException,
				callerMethodName,
				constructionMethodParameters.ToArray()));

		return this;
	}

	public $1 EnrichWithInformationAbout<TObjectUnderConstruction>(
		object? constructionMethodParameter,
		Exception? innerException = null,
		[CallerMemberName] string callerMethodName = "")
	{
		_messages.Add(
			BuildInstanceConstructionErrorMessage(
				typeof(TObjectUnderConstruction).Name,
				typeof(TObjectUnderConstruction).Namespace!,
				innerException,
				callerMethodName,
				new[] { constructionMethodParameter }));

		return this;
	}

	static string BuildInstanceConstructionErrorMessage(
		string objectUnderConstruction,
		string objectUnderConstructionNamespace,
		Exception? innerException,
		string callerMethodName,
		object?[] constructionMethodParameters)
	{
		var sb = new System.Text.StringBuilder();

		sb.Append($"{objectUnderConstruction}: construction failed ");

		if (innerException != null)
		{
			sb.Append($"due to {innerException.GetType().Name} ");
		}

		sb.Append($"calling {BuildCallerMethodPartialSignature(objectUnderConstruction, callerMethodName, constructionMethodParameters)} ");

		if (constructionMethodParameters.Length == 1)
		{
			sb.Append($"on {Render(constructionMethodParameters.First())}");
		}
		else if (constructionMethodParameters.Length > 1)
		{
			sb.Append($"with the following parameters: {string.Join(" ; ", constructionMethodParameters.Select(Render))}");
		}

		if (!string.IsNullOrEmpty(objectUnderConstructionNamespace))
		{
			sb.Append($"[{objectUnderConstructionNamespace}]");
		}

		return sb.ToString();
	}

	static string BuildMemberConstructionMessage(
		string objectUnderConstruction,
		string objectUnderConstructionNamespace,
		string memberUnderConstruction,
		object? invalidValue,
		string? ruleThatInvalidatesTheValue = null,
		string callerMethodName = "",
		params object?[] constructionMethodParameters)
	{
		var sb = new System.Text.StringBuilder();

		sb.Append($"{objectUnderConstruction}: ");

		if (!string.IsNullOrEmpty(callerMethodName))
		{
			sb.Append($"when called from {BuildCallerMethodPartialSignature(objectUnderConstruction, callerMethodName, constructionMethodParameters)}, ");
		}

		sb.Append($"{memberUnderConstruction} cannot accept value {Render(invalidValue)} ");

		if (!string.IsNullOrEmpty(ruleThatInvalidatesTheValue))
		{
			sb.Append($"- {Format(ruleThatInvalidatesTheValue, objectUnderConstruction, memberUnderConstruction)} ");
		}

		if (!string.IsNullOrEmpty(objectUnderConstructionNamespace))
		{
			sb.Append($"[{objectUnderConstructionNamespace}]");
		}

		return sb.ToString();
	}

	static string? Format(string? rule, string objectUnderConstruction, string memberUnderConstruction)
	=> rule switch
	{
		null => null,
		_ => rule
			.Replace("{type}", objectUnderConstruction)
			.Replace("{member}", memberUnderConstruction)
	};

	static string Render(object? invalidValue)
	=> invalidValue switch
	{
		null => "null",
		var v when v.HasInstancePropertiesWithPublicGetter() => JsonSerializer.Serialize(invalidValue, new JsonSerializerOptions(JsonSerializerDefaults.Web) { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping }),
		var v when v.HasUserDefinedConversions(out var converters) => Render(converters.First().Invoke(null, new[] { invalidValue })!),
		var v when v.HasConstructorWhoseParametersAllHaveAMatchingPropertyOrField(out var propertiesToRender, out var fieldsToRender) => RenderMembers(invalidValue, propertiesToRender, fieldsToRender),
		_ => invalidValue.ToString() ?? "null"
	};

	static string RenderMembers(object invalidValue, PropertyInfo[] propertiesToRender, FieldInfo[] fieldsToRender)
	=> (propertiesToRender, fieldsToRender) switch
	{
		([var encapsulatedProperty], _) => Render(encapsulatedProperty.GetValue(invalidValue)),
		(_, [var encapsulatedField]) => Render(encapsulatedField.GetValue(invalidValue)),
		_ => RenderComplexObject(invalidValue, propertiesToRender, fieldsToRender)
	};

	static string RenderComplexObject(object invalidValue, PropertyInfo[] propertiesToRender, FieldInfo[] fieldsToRender)
	{
		var renderedFields = fieldsToRender.Select(field => $"\"{field.Name}\": {Render(field.GetValue(invalidValue))}");
		var renderedProperties = propertiesToRender.Select(property => $"\"{property.Name}\": {Render(property.GetValue(invalidValue))}");
		var renderedMembers = renderedFields.Concat(renderedProperties);

		return $"{{ {string.Join(", ", renderedMembers)} }}";
	}

	static string BuildCallerMethodPartialSignature(
		string objectUnderConstruction,
		string callerMethodName,
		params object?[] constructionMethodParameters)
	=> $"{objectUnderConstruction}.{callerMethodName}({(constructionMethodParameters.Any() ? "..." : "")})";
}

public static class ObjectExtensionMethods
{
	public static bool HasInstancePropertiesWithPublicGetter(this object obj)
	=> obj.GetType()
		.GetProperties(BindingFlags.Public | BindingFlags.Instance)
		.Where(property => property.HasAPublicGetter(out var _))
		.Any();

	public static bool HasUserDefinedConversions(this object obj, out MethodInfo[] converters)
	{
		var methods = obj.GetType().GetMethods().ToArray();
		var implicitConverters = methods.Where(mi => mi.Name == "op_Implicit");
		var explicitConverters = methods.Where(mi => mi.Name == "op_Explicit");

		converters = implicitConverters
			.Concat(explicitConverters)
			.ToArray();
		return converters.Any();
	}

	public static bool HasConstructorWhoseParametersAllHaveAMatchingPropertyOrField(this object obj, out PropertyInfo[] propertiesToRender, out FieldInfo[] fieldsToRender)
	{
		var type = obj.GetType();

		var properties = type.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
		var fields = type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
		var parametersOfEachConstructor = type.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
			.Select(ctor => ctor.GetParameters())
			.OrderByDescending(parameters => parameters.Length);

		foreach(var parametersOfOneConstructor in parametersOfEachConstructor)
		{
			var matchingProperties = new List<PropertyInfo>();
			var matchingFields = new List<FieldInfo>();
			foreach (var param in parametersOfOneConstructor)
			{
				var matchingProperty = properties.FirstOrDefault(propertyInfo => string.Equals(param.Name, propertyInfo.Name, StringComparison.InvariantCultureIgnoreCase));
				if (matchingProperty != null)
				{
					matchingProperties.Add(matchingProperty);
					continue;
				}

				var matchingFieldName = fields.FirstOrDefault(field => string.Equals(param.Name, field.Name, StringComparison.InvariantCultureIgnoreCase));
				if (matchingFieldName != null)
				{
					matchingFields.Add(matchingFieldName);
					continue;
				}

				break;
			}

			var numberOfMatchesFound = matchingProperties.Count + matchingFields.Count;
			var isConstructorWhoseParametersAllHaveAMatchingPropertyOrField = (numberOfMatchesFound == parametersOfOneConstructor.Length);
			if (isConstructorWhoseParametersAllHaveAMatchingPropertyOrField)
			{
				propertiesToRender = matchingProperties.ToArray();
				fieldsToRender = matchingFields.ToArray();
				return true;
			}
		}

		propertiesToRender = Array.Empty<PropertyInfo>();
		fieldsToRender = Array.Empty<FieldInfo>();
		return false;
	}
}

static class PropertyInfoExtensionMethods
{
	public static bool HasAPublicGetter(this PropertyInfo propertyInfo, out MethodInfo getter)
	{
		var publicAccessors = propertyInfo.GetAccessors(nonPublic: false);
		var publicGetters = publicAccessors.Where(method => method.ReturnType != typeof(void));

		if (!publicGetters.Any())
		{
			getter = null!;
			return false;
		}

		getter = publicGetters.First();
		return true;
	}
}
endsnippet

snippet throw "throw exception" i
throw ${4:ObjectConstructionException}.${5:WhenConstructingAMemberFor}<${3:`!p snip.rv = basename_to_classname(snip.basename)`}>(nameof(${1:foo}), ${2:$1})
endsnippet

snippet td "Test Double" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:I`!p snip.rv = basename_to_classname(snip.basename).replace('TestDouble', '')`} That_Does_Not_Trigger_Exceptions
	=> That_Returns(${2:Something}Archetype.SomeValue);

	public static $1 That_Returns($2 `!p snip.rv = camel_case(t[2])`)
	{
		var testDouble = Dummy;
		testDouble
			.${3:DoSomething}($0)
			.ReturnsForAnyArgs(`!p snip.rv = camel_case(t[2])`);

		return testDouble;
	}

	public static $1 Dummy => Substitute.For<$1>();
}
endsnippet

snippet arch "Archetype" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:`!p snip.rv = basename_to_classname(snip.basename).replace('Archetype', '')`} SomeValue => With_SomeValue_In_Every_Field(salt: 0);
	public static $1 SomeOtherValue => With_SomeValue_In_Every_Field(salt: 1);
	public static $1 YetAnotherValue => With_SomeValue_In_Every_Field(salt: 2);

	public static $1 With_SomeValue_In_Every_Field(int salt = 0)
	=> $1.From$0(
		someParameter: SomeParameterArchetype.With_SomeValue_In_Every_Field(salt));
}
endsnippet

snippet Arch "Archetype (with old-school data structures)" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:`!p snip.rv = basename_to_classname(snip.basename).replace('Archetype', '')`} SomeValue => With_SomeValue_In_Every_Field(salt: 0);
	public static $1 SomeOtherValue => With_SomeValue_In_Every_Field(salt: 1);
	public static $1 YetAnotherValue => With_SomeValue_In_Every_Field(salt: 2);

	public static $1 With_SomeValue_In_Every_Field(int salt = 0)
	=> new()
	{
		$0SomeParameter = SomeParameterArchetype.With_SomeValue_In_Every_Field(salt))
	};
}
endsnippet

snippet M "Factory method" b
$0public static `!p snip.rv = basename_to_classname(snip.basename)` From${1:Something}(${2:Foo} `!p snip.rv = camel_case(t[2])`)
{
	try
	{
		return new($0`!p snip.rv = camel_case(t[2])`);
	}
	catch (${3:ObjectConstructionException} `!p snip.rv = camel_case(t[3])`)
	{
		AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
		throw;
	}
	catch (Exception developerMistake)
	{
		var `!p snip.rv = camel_case(t[3])` = $3.FromDeveloperMistake(typeof(`!p snip.rv = basename_to_classname(snip.basename)`), developerMistake);
		AddMethodParametersValuesAsDebuggingInformation(`!p snip.rv = camel_case(t[3])`);
		throw `!p snip.rv = camel_case(t[3])`;
	}

	void AddMethodParametersValuesAsDebuggingInformation($3 `!p snip.rv = camel_case(t[3])`)
	{
		`!p snip.rv = camel_case(t[3])`.AddDebuggingInformation(nameof(`!p snip.rv = camel_case(t[2])`), `!p snip.rv = camel_case(t[2])`);
	}
}
endsnippet

snippet am "Assert Multiple" b
Assert.Multiple(() =>
{
	${VISUAL}
});
endsnippet

snippet aa "Arg.Any" w
Arg.Any<${VISUAL}>()
endsnippet

snippet serialize "serialize" w
System.Text.Json.JsonSerializer.Serialize(${VISUAL}, new System.Text.Json.JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.Default });
endsnippet

snippet sw "StreamWrite into a file" b
StreamWriter sw; for ((int i, string filenameFormat) = (1, @"`!p snip.rv = envVar('d')`/${1:foo}_{0:00}${2:_bar}.${3:json}");;) { var filename = String.Format(filenameFormat, i++);  if (!File.Exists(filename)) { sw = new StreamWriter(filename, append: true); break; } }
sw.WriteLine("Hello :)");
sw.Dispose();
endsnippet

global !p
from my_snippets_helpers import *
endglobal

snippet ns "namespace" b
namespace `!p snip.rv = path_to_namespace(path)`;

$0
endsnippet

snippet itf "Interface" b
public interface ${1:`!p snip.rv = basename_to_classname(snip.basename)`}
{
	$0
}
endsnippet

snippet cls "class" b
$0class $2${1: : I$2}
{
	public ${2:`!p snip.rv = basename_to_classname(snip.basename)`}()
	{
	}

}
endsnippet

snippet rc "record" b
record ${1:`!p snip.rv = basename_to_classname(snip.basename)`}(
	$0
);
endsnippet


snippet m "method" b
${4:static }${3:`!p snip.rv=basename_to_classname(snip.basename)`} ${1:DoSomething}(${2:TInput} `!p snip.rv = t[2][0].lower() + t[2][1:]`)
{
}

endsnippet

snippet M "public method" b
public${4: static} ${3:`!p snip.rv=basename_to_classname(snip.basename)`} ${1:DoSomething}($0)
${5:=> new $3();}

endsnippet

snippet _ "field" b
${3:static }readonly ${1:SomeType} ${2:`!p snip.rv = "_" + (t[1][1].lower()+t[1][2:] if (t[1][0].isupper() and t[1][1].isupper()) else t[1][0].lower()+t[1][1:]) if len(t[1]) > 1 else ""`};

endsnippet

snippet p "property" b
public ${1:`!p snip.rv = basename_to_classname(snip.basename)`} ${2:Stuff} { get;${3: init;} }

endsnippet

snippet P "property with getter" b
public${3: static}${4: readonly} ${1:`!p snip.rv = basename_to_classname(snip.basename)`} ${2:With_SomeValue_In_Every_Field}
{
	get
	{
		${4:return new $1();}
	}
}

endsnippet

snippet fact "XUnit Fact" b
[Fact]
public void WHEN_${1:happy_path}_EXPECT_${2:target}_TO_${3:DO/BE/NOT}_${4:something}()
{
	// Arrange
	var input = ${5:new Request();}
	// Act
	$6
	// Assert
	$0
}


endsnippet

snippet theory "XUnit Theory" b
[Theory]
$0
public void WHEN_${1:happy_path}_EXPECT_${2:target}_TO_${3:DO/BE/NOT}_${4:something}($5)
{
	// Arrange
	var input = ${6:new Request();}
	// Act
	$7
	// Assert
	$8
}


endsnippet

snippet id "InlineData" b
[InlineData($1)]$0
endsnippet

snippet md "MemberData" b
[MemberData(nameof(${1:Data}))]
	public static TheoryData<${2:string, int}> $1 =>
		new TheoryData<$2> {
			{ ${3:"ðŸ˜€ ðŸ˜ƒ ðŸ˜„", 2} }, // ${4:Emojis}
			{ ${5:"     ", 2} }, // ${6:Weird characters}
			{ ${7:new String('x', 2000 + 1), 2} } // ${0:More than 2000 characters}
		};
endsnippet

snippet interactor "Interactor Contract" b
namespace `!p snip.rv = path_to_namespace(path)`;

public interface ${1:`!p snip.rv = basename_to_classname(snip.basename)`}
{
	Response Process(Request req);

	public class Request {
	${3}
		public static Request Create() {
			return new Request();
		}
	}

	public class Response {
		${4}
		public static Response Create() {
			return new Response();
		}
		$0
	}
}

endsnippet






snippet ext "ExtensionMethods file" b
namespace `!p snip.rv = path_to_namespace(path)`;

public static class `!p snip.rv = snip.basename.replace(".", "")`
{
	mape$0
}
endsnippet

snippet me "mapping extension method" b
public static ${3:TOutput} ${2:ToUseCaseInputField}(this ${1:`!p snip.rv = basename_to_classname(snip.basename)`} `!p snip.rv = t[1][0].lower() + t[1][1:]`)
=> $1 switch
{
	null => null,
	_ => new $3()
		with
		{
		}
};

endsnippet






snippet td "Test Double" b
namespace `!p snip.rv = path_to_namespace(path)`;

public static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static I`!p snip.rv = basename_to_classname(snip.basename).replace('TestDouble', '')` Dummy => Substitute.For<I`!p snip.rv = basename_to_classname(snip.basename).replace('TestDouble', '')`>();
}
endsnippet

snippet arch "Archetype" b
namespace `!p snip.rv = path_to_namespace(path)`;

public static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static `!p snip.rv = basename_to_classname(snip.basename).replace('Archetype', '')` ${1:With_SomeValue_In_Every_Field}
	=> new `!p snip.rv = basename_to_classname(snip.basename).replace('Archetype', '')`()${2:
	{
		${3:Foo}
	}};
}
endsnippet





snippet am "Assert Multiple" b
Assert.Multiple(() =>
{
	${VISUAL}
});
endsnippet

snippet aa "Arg.Any" w
Arg.Any<${VISUAL}>()
endsnippet

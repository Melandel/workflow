priority 1

global !p
from my_snippets_helpers import *
endglobal

snippet ns "namespace (file-scoped)" b
namespace `!v GetCurrentCsharpNamespace()`;

$0
endsnippet

snippet Ns "namespace (old school)" b
namespace `!v GetCurrentCsharpNamespace()`
{
	$0
}
endsnippet

snippet itf "Interface" b
public interface ${1:`!p snip.rv = basename_to_classname(snip.basename)`}
{
	$0
}
endsnippet

snippet cls "class" b
$0class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public `!p snip.rv = basename_to_classname(snip.basename)`()
	{
	}
}
endsnippet

snippet Cls "static class" b
static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static$1
}
endsnippet

snippet ext "extension methods" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename).replace('.', '')`
{
	public static string ${3:ToSomeString}(this ${1:string} ${2:`!p snip.rv = camel_case(t[1])`})
	=> $2 s$0witch
	{
		null => null,
		_ => $2.ToString()
	};

	public static string $3(this $1 $2)
	{
		var foo = $2 switch
		{
			null => null,
			_ => $2
		};

		return foo;
	}
}
endsnippet

snippet rc "record" b
record ${1:`!p snip.rv = basename_to_classname(snip.basename)`}(
	$0);
endsnippet

snippet ds "data structure with properties" b
namespace `!v GetCurrentCsharpNamespace()`;

`!v stridx(GetCurrentCsharpNamespace(), "Domain") >= 0 ? "public " : ""`record `!p snip.rv = basename_to_classname(snip.basename)`
{
	$0public override string ToString() => `!p snip.rv = t[1] if t[2] == "string" else t[1]+'.Render()'`;
	public static implicit operator `!p snip.rv = t[2]`(`!p snip.rv = basename_to_classname(snip.basename)` obj) => obj.$1;

	`!p snip.rv = "readonly" if t[1].startswith("_") else "public"` ${2:string} ${1:Name}`!p snip.rv = ";" if t[1].startswith("_") else " { get; init; }"`
	`!p snip.rv = basename_to_classname(snip.basename)`($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		$1 = `!p snip.rv = camel_case(t[1]).lstrip('_')` switch
		{
			null => throw ObjectConstructionException.WhenConstructingAMemberFor<${3:`!p snip.rv = basename_to_classname(snip.basename)`}>(nameof($1), `!p snip.rv = camel_case(t[1]).lstrip('_')`, "@member must ${4:…}"),
			_ => `!p snip.rv = camel_case(t[1]).lstrip('_')`
		};
	}

	public static `!p snip.rv = basename_to_classname(snip.basename)` From($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		try
		{
			return new(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
		catch (ObjectConstructionException objectConstructionException)
		{
			objectConstructionException.EnrichConstructionFailureContextWith<$3>(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
			throw;
		}
		catch (Exception developerMistake)
		{
			throw ObjectConstructionException.WhenConstructingAnInstanceOf<$3>(developerMistake, `!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
	}
}
endsnippet

snippet Ds "data structure with properties (old school)" b
namespace `!v GetCurrentCsharpNamespace()`;

`!v stridx(GetCurrentCsharpNamespace(), "Domain") >= 0 ? "public " : ""`class `!p snip.rv = basename_to_classname(snip.basename)`
{
	$0public override string ToString() => `!p snip.rv = t[1] if t[2] == "string" else t[1]+'.Render()'`;
	public static implicit operator `!p snip.rv = t[2](`!p snip.rv = basename_to_classname(snip.basename)` obj) => obj.$1;

	`!p snip.rv = "readonly" if t[1].startswith("_") else "public"` ${2:string} ${1:Name}`!p snip.rv = ";" if t[1].startswith("_") else " { get; }"`
	`!p snip.rv = basename_to_classname(snip.basename)`($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		$1 = `!p snip.rv = camel_case(t[1]).lstrip('_')` switch
		{
			null => throw ObjectConstructionException.WhenConstructingAMemberFor<${3:`!p snip.rv = basename_to_classname(snip.basename)`}>(nameof($1), `!p snip.rv = camel_case(t[1]).lstrip('_')`, "@member must ${4:…}"),
			_ => `!p snip.rv = camel_case(t[1]).lstrip('_')`
		};
	}

	public static `!p snip.rv = basename_to_classname(snip.basename)` From($2 `!p snip.rv = camel_case(t[1]).lstrip('_')`)
	{
		try
		{
			return new(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
		catch (ObjectConstructionException objectConstructionException)
		{
			objectConstructionException.EnrichConstructionFailureContextWith<$3>(`!p snip.rv = camel_case(t[1]).lstrip('_')`);
			throw;
		}
		catch (Exception developerMistake)
		{
			throw ObjectConstructionException.WhenConstructingAnInstanceOf<$3>(developerMistake, `!p snip.rv = camel_case(t[1]).lstrip('_')`);
		}
	}
}
endsnippet

snippet ex "Exception" b
namespace `!v GetCurrentCsharpNamespace()`;

public class ${1:`!p snip.rv = basename_to_classname(snip.basename)`} : Exception
{
	$1(string message, Exception? innerException = null)
	: base(message, innerException)
	{
	}

	$0public static $1 From${2:InvalidMemberValue}(Exception? innerException = null)
	=> new("", innerException);

	public static $1 From$2(Exception? innerException = null)
	{
		var message = "";
		return new(message, innerException);
	}
}
endsnippet

snippet throw "throw exception" i
throw ObjectConstructionException.WhenConstructingAMemberFor<${1:`!p snip.rv = basename_to_classname(snip.basename)`}>(nameof(${2:foo}), ${3:$2}, "@member must ${4:…}")
endsnippet

snippet td "Test Double" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:I`!p snip.rv = basename_to_classname(snip.basename).replace('TestDouble', '')`} That_Does_Not_Trigger_Exceptions
	=> That_Returns(${2:Something}Archetype.SomeValue);

	public static $1 That_Returns($2 `!p snip.rv = camel_case(t[2])`)
	{
		var testDouble = Dummy;
		testDouble
			.${3:DoSomething}($0)
			.ReturnsForAnyArgs(`!p snip.rv = camel_case(t[2])`);

		return testDouble;
	}

	public static $1 Dummy => Substitute.For<$1>();
}
endsnippet

snippet arch "Archetype" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:`!p snip.rv = basename_to_classname(snip.basename).replace('Archetype', '')`} SomeValue => With_SomeValue_In_Every_Field(salt: 0);
	public static $1 SomeOtherValue => With_SomeValue_In_Every_Field(salt: 1);
	public static $1 YetAnotherValue => With_SomeValue_In_Every_Field(salt: 2);

	public static $1 With_SomeValue_In_Every_Field(int salt = 0)
	=> $1.From$0(
		someParameter: SomeParameterArchetype.With_SomeValue_In_Every_Field(salt));
}
endsnippet

snippet Arch "Archetype (with old-school data structures)" b
namespace `!v GetCurrentCsharpNamespace()`;

static class `!p snip.rv = basename_to_classname(snip.basename)`
{
	public static ${1:`!p snip.rv = basename_to_classname(snip.basename).replace('Archetype', '')`} SomeValue => With_SomeValue_In_Every_Field(salt: 0);
	public static $1 SomeOtherValue => With_SomeValue_In_Every_Field(salt: 1);
	public static $1 YetAnotherValue => With_SomeValue_In_Every_Field(salt: 2);

	public static $1 With_SomeValue_In_Every_Field(int salt = 0)
	=> new()
	{
		$0SomeParameter = SomeParameterArchetype.With_SomeValue_In_Every_Field(salt))
	};
}
endsnippet

snippet M "Factory method" b
$0public static ${2:`!p snip.rv = basename_to_classname(snip.basename)`} From(${1:Foo} `!p snip.rv = camel_case(t[1])`)
{
	try
	{
		$0`!p snip.rv = snip.v.text if snip.v.text != "" else "return new("+camel_case(t[1])+");"`
	}
	catch (ObjectConstructionException objectConstructionException)
	{
		objectConstructionException.EnrichConstructionFailureContextWith<$2>($1);
		throw;
	}
	catch (Exception developerMistake)
	{
		throw ObjectConstructionException.WhenConstructingAnInstanceOf<$2>(developerMistake`!p snip.rv = (', ' + camel_case(t[1])) if t[1] != "" else ""`);
	}
}
endsnippet

snippet am "Assert Multiple" b
Assert.Multiple(() =>
{
	${VISUAL}
});
endsnippet

snippet aa "Arg.Any" w
Arg.Any<${VISUAL}>()
endsnippet

snippet serialize "serialize" w
System.Text.Json.JsonSerializer.Serialize(${VISUAL}, new System.Text.Json.JsonSerializerOptions { WriteIndented = true, Encoder = System.Text.Encodings.Web.JavaScriptEncoder.Default });
endsnippet

snippet sw "StreamWrite into a file" b
StreamWriter sw; for ((int i, string filenameFormat) = (1, @"`!p snip.rv = envVar('d')`/${1:foo}_{0:00}${2:_bar}.${3:json}");;) { var filename = String.Format(filenameFormat, i++);  if (!File.Exists(filename)) { sw = new StreamWriter(filename, append: true); break; } }
sw.WriteLine("Hello :)");
sw.Dispose();
endsnippet

snippet ns "namespace" b
namespace ${1:MyNameSpace}
{
	${0}
}
endsnippet

snippet m+^ "Public static method" b
	public static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet m&^ "Internal static method" b
	internal static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet m|^ "protected static method" b
	protected static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet m-^ "Private static method" b
	public static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mi+^ "Public static method (int)" b
	public static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mi&^ "Internal static method (int)" b
	internal static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mi|^ "protected static method (int)" b
	protected static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mi-^ "Private static method (int)" b
	public static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet ms+^ "Public static method (string)" b
	public static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet ms&^ "Internal static method (string)" b
	internal static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet ms|^ "protected static method (string)" b
	protected static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet ms-^ "Private static method (string)" b
	public static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mb+^ "Public static method (bool)" b
	public static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mb&^ "Internal static method (bool)" b
	internal static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mb|^ "protected static method (bool)" b
	protected static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mb-^ "Private static method (bool)" b
	public static ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet m+% "Public abstract method" b
	public abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet m&% "Internal abstract method" b
	internal abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet m|% "protected abstract method" b
	protected abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet m-% "Private abstract method" b
	public abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mi+% "Public abstract method (int)" b
	public abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mi&% "Internal abstract method (int)" b
	internal abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mi|% "protected abstract method (int)" b
	protected abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mi-% "Private abstract method (int)" b
	public abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet ms+% "Public abstract method (string)" b
	public abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet ms&% "Internal abstract method (string)" b
	internal abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet ms|% "protected abstract method (string)" b
	protected abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet ms-% "Private abstract method (string)" b
	public abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mb+% "Public abstract method (bool)" b
	public abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mb&% "Internal abstract method (bool)" b
	internal abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mb|% "protected abstract method (bool)" b
	protected abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet mb-% "Private abstract method (bool)" b
	public abstract ${1:void} ${2}(${3})
	{
		${0}
	}
endsnippet

snippet itf "Interface" b
${1:public} interface ${2:`vim_snippets#Filename()`}
{
	$0
}
endsnippet

snippet itf& "Internal Interface" b
internal interface ${1:`vim_snippets#Filename()`}
{
	${0}
}
endsnippet

snippet itf& "Private interface" b
private interface ${1:`vim_snippets#Filename()`}
{
	${0}
}
endsnippet

snippet fact "XUnit Fact" b
[Fact]
public void WHEN_${1:happy_path}_EXPECT_${2:target}_TO_${3:DO/BE/NOT}_${4:something}()
{
	// Arrange
	var input = ${5:new Request();}
	// Act
	$6
	// Assert
	$0
}


endsnippet

snippet theory "XUnit Theory" b
[Theory]
$0
public void WHEN_${1:happy_path}_EXPECT_${2:target}_TO_${3:DO/BE/NOT}_${4:something}($5)
{
	// Arrange
	var input = ${6:new Request();}
	// Act
	$7
	// Assert
	$8
}


endsnippet

snippet id "InlineData" b
[InlineData($1)]$0
endsnippet

snippet md "MemberData" b
[MemberData(nameof(${1:Data}))]
	public static TheoryData<${2:string, int}> $1 =>
		new TheoryData<$2> {
			{ ${3:"ðŸ˜€ ðŸ˜ƒ ðŸ˜„", 2} }, // ${4:Emojis}
			{ ${5:"     ", 2} }, // ${6:Weird characters}
			{ ${7:new String('x', 2000 + 1), 2} } // ${0:More than 2000 characters}
		};
endsnippet

snippet interactor "Interactor Contract" b
namespace ${2:MyNameSpace}
{
	public interface ${1:`!p snip.rv = snip.basename`}
	{
		Response Process(Request req);

		public class Request {
		${3}
			public static Request Create() {
				return new Request();
			}
		}

		public class Response {
			${4}
			public static Response Create() {
				return new Response();
			}
			$0
		}
	}
}
endsnippet

snippet td "Test Double" b
namespace $0
{
	public static class `!p snip.rv = snip.basename.replace('TestDoubles', 'TestDouble')`
	{
		public static I`!p snip.rv = snip.basename.replace('TestDoubles', '')` Dummy => Substitute.For<I`!p snip.rv = snip.basename.replace('TestDoubles', '')`>();
	}
}
endsnippet

snippet tdg "Test Double with Getter" b

public static $0I`!p snip.rv = snip.basename.replace('TestDoubles', '')` ${1:That_Returns_With_Zero_Data}
{
	get
	{
		var testDouble = Substitute.For<I`!p snip.rv = snip.basename.replace('TestDoubles', '')`>();
		return testDouble;
	}
}
endsnippet

snippet tdp "Test Double with parameters" b

public static $0I`!p snip.rv = snip.basename.replace('TestDoubles', '')` ${2:That_Results_Stuff_Only_For}(${4:object o})
{
	var testDouble = Substitute.For<I`!p snip.rv = snip.basename.replace('TestDoubles', '')`>();
	testDouble
	 .${3:Method}()
		.Returns();
	return testDouble;
}
endsnippet

snippet arch "Archetype" b
namespace $0
{
	public static class `!p snip.rv = snip.basename.replace('Archetypes', 'Archetype')`
	{
		public static `!p snip.rv = snip.basename.replace('Archetypes', '')` ${1:That_Returns_Stuff}
			=> new `!p snip.rv = snip.basename.replace('Archetypes', '')`()${2:
			{
				${3:Foo}
			}};
	}
}
endsnippet

snippet archa "Archetype with array" b
public static $0`!p snip.rv = snip.basename.replace('Archetypes', '')` ${1:That_Returns_Stuff}
	=> new `!p snip.rv = snip.basename.replace('Archetypes', '')`()${2:
	{
		${3:Foo}
	}};
endsnippet

snippet archg "Archetype with getter" b
public static $0`!p snip.rv = snip.basename.replace('Archetypes', '')` ${1:That_Returns_Stuff}
{
	get
	{
		var ${2:variable} = new `!p snip.rv = snip.basename.replace('Archetypes', '')`();
		return ${2};
	}
}
endsnippet

snippet archp "Archetype with parameters" b
public static $0`!p snip.rv = snip.basename.replace('Archetypes', '')` ${1:That_Returns_Stuff}(${2:string stuff})
{
	var `!p snip.rv = snip.basename[0]+snip.basename[1:].replace('Archetypes', '')` = new `!p snip.rv = snip.basename.replace('Archetypes', '')`();
	return `!p snip.rv = snip.basename[0]+snip.basename[1:].replace('Archetypes', '')`;
}
endsnippet

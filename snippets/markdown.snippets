snippet madr "Description" b
problem$0
drivers
options
decision
prosConsUnknowns
extra
endsnippet

snippet problem "Context & Problem Statement" b

## ðŸ“‹ Context and Problem Statement
> **${1:Which format and structure should our architectural records follow?}**
${2:
We lost entire days tracking why some code was written this way on the following items:
<details><summary>Item 1</summary>

\`\`\`
Time lost: 5 days
\`\`\`
</details>

<details><summary>Item 2</summary>

\`\`\`
Time lost: 4 days
\`\`\`
</details>}
endsnippet

snippet drivers "Decision Drivers" b

## ðŸ”° Decision Drivers
* $0Impact on existing API
* Impact on existing workflow
* Impact on future decisions
* Maintenability
* Testability
* Security
* Performances

endsnippet

snippet options "Considered Options" b

## ðŸ’¡ Considered Options
* **Option 1:** $0Use Markdown Architectural Decision Record
* **Option 2:** Create custom architectural decision record format
* **Option 3:** Do not use any form of template

endsnippet

snippet decision "Decision Outcome" b

## ðŸŽ¯ Decision Outcome
* **Option ${0}1:** Use Markdown Architectural Decision Record
	* best compromise regarding cost and maintenance
	* established
* **Positive Consequences:**
	* We now have resources to speed up newcomers' training
* **Negative Consequences:**
	* Need to create records for existing records
	* Need to train other teams

endsnippet

snippet prosConsUnknowns "Pros, Cons & Unknowns" b

## ðŸŽ­ Pros, Cons & Unknowns of the Options

* **Option 1:** $0Use Markdown Architectural Decision Record
	* âœ…âœ… Easy
	* âœ… Structured, Established
	* ðŸš« Markdown is limited in features
	* ðŸš« Requires markdown viewer
	* ðŸ¤· Unmeasured effectiveness
<!-- -->
* **Option 2:** Create custom architectural decision record format
	* âœ… Most adapted
	* ðŸš« Not Established
	* ðŸ¤· Cost, Impact
<!-- -->
* **Option 3:** Do not use any form of template
	* âœ… No cost
	* ðŸš« No time saved
	* ðŸ¤· May bite us later
<!-- -->

endsnippet

snippet extra "Additional Information" b

## ðŸ“Ž Additional Information
* $0[some link]()
* [some other link]()
endsnippet

snippet "spoil(er)?" "spoiler" br
<details><summary>${2:Title}</summary>

${VISUAL:Content}
</details>

endsnippet

snippet cols "columns" b

<div style="display: flex"><div style="flex: ${1:50}%; max-width: $1%;">

$0${VISUAL}
</div><div style="flex: $1%; max-width: $1%;">

\`\`\`
Example
\`\`\`
</div></div>

endsnippet

snippet blog "blog post" b
---
layout: post
title:  "${1:My quest for improved craftsmanship}"
date:   `!v strftime('%Y-%m-%d')`
categories: ${2:craft}
---

${3:**"Good Enough"** is often the driving philosophy at the workplace - that's reasonable. But it also means people who go for _"Highest Level of Craft"_ cannot improve correctly at the workplace.}

Hi!

> ${4:Do you feel _agile_?
Do you feel _proud_ of the codebase you're working on?
What's your idea about how far (or close) you are from the _state of the art_?
Do you _trust_ the code you read?
What are three _positive_ things your codebase inspires to you?}

Let's talk about ${5:stuff.}

&nbsp;

$0
endsnippet

snippet rq "REST exhange" b
${1:###} ${2:Verb Noun}
<div style="display: flex"><div style="flex: 50%; max-width: 50%;">

**Request**
\`\`\`
$0curl -X GET $api
--verbose --silent --location
-H "Authorization: Bearer $token"
\`\`\`


</div><div style="flex: 50%; max-width: 50%;">

**Response**

ðŸš« 401 Unauthorized
\`\`\`
[]
\`\`\`
* Caused by this
* Caused also by that

âœ… 200 OK
\`\`\`
[]
\`\`\`
</div></div>

endsnippet

snippet seq "sequence diagram" b
\`\`\`puml_sequence
mainframe ${5:Not only individuals and interactions, but also a community of professionals}
'https://plantuml.com/fr/sequence-diagram
skinparam BoxPadding 10
skinparam ParticipantPadding 30

box "${1:Foo}"
	participant "${3:Foo}" as $3
$0end box

box "${2:Bar}"
	participant "${4:Bar}" as $4
end box

$3 -> $4
\`\`\`
endsnippet

snippet act "activity diagram" b
\`\`\`puml_activity
mainframe ${1:Not only working software, but also well-crafted software}
'https://plantuml.com/fr/activity-diagram-beta
start

$0group Arrange
	:Build Credit Application Contract;
	note right
		foo
			* bar
	end note
	:Build main route request;
end group

group Act
	:Call RejectionRule's main route;
	:Call RejectionRule's details route;
end group

group Assert
	:Run assertions on details;
end group
stop
\`\`\`
endsnippet

snippet cls "class diagram (1 API)" b
\`\`\`puml_class
mainframe ${0:Not only responding to change, but also steadily adding value}
'https://plantuml.com/fr/class-diagram

package "Api / Dto" as Api {
	class "Controller" as Controller {
			+ Response DoStuff(request)
	}
	class "Request" as Request {
	}
	class "Response" as Response {
	}
}

package Application {
	rectangle "ServiceProviders" as ServiceProviders {
		interface IServiceProvider {
			+ DomainObject GetDomainObject()
		}
	}
	rectangle "UseCases" as UseCases {
		interface IUseCase {
			UseCaseOutput Process(UseCaseInput)
		}
		class UseCase {
			- IServiceProvider
			+ UseCaseOutput Process(UseCaseInput)
		}

		class "UseCaseOutput" as UseCaseOutput {
			+ Guid useCaseExecutionId
		}

		class "UseCaseInput" as UseCaseInput {
			+ Guid useCaseExecutionId
			+ CancellationToken cancellationToken
		}
	}
}

package "Domain" as Domain {
	class DomainObject {
		+ foo
		{static} Create(foo)
		{static} Reconstitute(guid, foo)
		+ DoStuff()
	}
}

package "Infrastructure" as Infrastructure {
	class ServiceProvider {
		- ServiceProviderClient
		+ DomainObject GetDomainObject()
	}
}

UseCase -up-|> IUseCase
ServiceProvider -up-|> IServiceProvider
\`\`\`
endsnippet

snippet cls2 "class diagram (2 APIs)" b
\`\`\`puml_class
mainframe ${0:Not only responding to change, but also steadily adding value}
'https://plantuml.com/fr/class-diagram

package "${1:Api_1}" as Pack1 {
	rectangle "Infrastructure" as Infra1 {
		'class "Foo" as Infra1Foo {
		'}
	}

	rectangle "Domain" as Domain1 {
		'class "Foo" as Domain1Foo {
		'}
	}

	rectangle "Application" as App1 {
		'class "Foo" as App1Foo {
		'}
	}

	rectangle "Api / Dto" as Api1 {
		'class "Foo" as Api1Foo {
		'}
	}
}

package "${2:Api_2}" as Pack2{
	rectangle "Infrastructure" as Infra2 {
		'class "Foo" as Infra2Foo {
		'}
	}

	rectangle "Domain" as Domain2 {
		'class "Foo" as Domain2Foo {
		'}
	}

	rectangle "Application" as App2 {
		'class "Foo" as App2Foo {
		'}
	}

	rectangle "Api / Dto" as Api2 {
		'class "Foo" as Api2Foo {
		'}
	}
}
\`\`\`
endsnippet

snippet cls3 "class diagram (3 blocks)" b
\`\`\`puml_class
mainframe ${0:Not only responding to change, but also steadily adding value}
'https://plantuml.com/fr/class-diagram

package "${1:Api_1}" as Pack1 {
	rectangle "Infrastructure" as Infra1 {
		'class "Foo" as Infra1Foo {
		'}
	}

	rectangle "Domain" as Domain1 {
		'class "Foo" as Domain1Foo {
		'}
	}

	rectangle "Application" as App1 {
		'class "Foo" as App1Foo {
		'}
	}

	rectangle "Api / Dto" as Api1 {
		'class "Foo" as Api1Foo {
		'}
	}
}

package "${2:Api_2}" as Pack2 {
	rectangle "Infrastructure" as Infra2 {
		'class "Foo" as Infra2Foo {
		'}
	}

	rectangle "Domain" as Domain2 {
		'class "Foo" as Domain2Foo {
		'}
	}

	rectangle "Application" as App2 {
		'class "Foo" as App2Foo {
		'}
	}

	rectangle "Api / Dto" as Api2 {
		'class "Foo" as Api2Foo {
		'}
	}
}

package "${3:Api_3}" as Pack3 {
	rectangle "Infrastructure" as Infra3 {
		'class "Foo" as Infra3Foo {
		'}
	}

	rectangle "Domain" as Domain3 {
		'class "Foo" as Domain3Foo {
		'}
	}

	rectangle "Application" as App3 {
		'class "Foo" as App3Foo {
		'}
	}

	rectangle "Api / Dto" as Api3 {
		'class "Foo" as Api3Foo {
		'}
	}
}
\`\`\`
endsnippet

snippet cls4 "class diagram (4 blocks)" b
\`\`\`puml_class
mainframe ${0:Not only responding to change, but also steadily adding value}
'https://plantuml.com/fr/class-diagram

package "${1:Api_1}" as Pack1 {
	rectangle "Infrastructure" as Infra1 {
		'class "Foo" as Infra1Foo {
		'}
	}

	rectangle "Domain" as Domain1 {
		'class "Foo" as Domain1Foo {
		'}
	}

	rectangle "Application" as App1 {
		'class "Foo" as App1Foo {
		'}
	}

	rectangle "Api / Dto" as Api1 {
		'class "Foo" as Api1Foo {
		'}
	}
}

package "${2:Api_2}" as Pack2 {
	rectangle "Infrastructure" as Infra2 {
		'class "Foo" as Infra2Foo {
		'}
	}

	rectangle "Domain" as Domain2 {
		'class "Foo" as Domain2Foo {
		'}
	}

	rectangle "Application" as App2 {
		'class "Foo" as App2Foo {
		'}
	}

	rectangle "Api / Dto" as Api2 {
		'class "Foo" as Api2Foo {
		'}
	}
}

package "${3:Api_3}" as Pack3 {
	rectangle "Infrastructure" as Infra3 {
		'class "Foo" as Infra3Foo {
		'}
	}

	rectangle "Domain" as Domain3 {
		'class "Foo" as Domain3Foo {
		'}
	}

	rectangle "Application" as App3 {
		'class "Foo" as App3Foo {
		'}
	}

	rectangle "Api / Dto" as Api3 {
		'class "Foo" as Api3Foo {
		'}
	}
}

package "${4:Api_4}" as Pack4 {
	rectangle "Infrastructure" as Infra4 {
		'class "Foo" as Infra4Foo {
		'}
	}

	rectangle "Domain" as Domain4 {
		'class "Foo" as Domain4Foo {
		'}
	}

	rectangle "Application" as App4 {
		'class "Foo" as App4Foo {
		'}
	}

	rectangle "Api / Dto" as Api4 {
		'class "Foo" as Api4Foo {
		'}
	}
}
\`\`\`
endsnippet

snippet mm "mindmap diagram" b
\`\`\`puml_mindmap
mainframe ${1:Not only customer collaboration, but also productive partnerships}
'https://plantuml.com/fr/mindmap-diagram

*[#lightblue] ${2:Information Access}
** ${3:By page reference}
$0
\`\`\`
endsnippet
